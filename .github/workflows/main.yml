name: Validate Stream URLs

on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight
  workflow_dispatch:
    inputs:
      timeout:
        description: 'URL validation timeout (seconds)'
        required: true
        default: '10'
        type: number
      check_all:
        description: 'Validate all URLs (slower but thorough)'
        required: true
        default: true
        type: boolean
      source_url:
        description: 'JSON source URL'
        required: true
        default: 'https://iptv-org.github.io/api/streams.json'
        type: string

jobs:
  validate-urls:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
      - name: Validate URLs
        env:
          INPUT_TIMEOUT: ${{ inputs.timeout || '10' }}
          INPUT_CHECK_ALL: ${{ inputs.check_all || 'true' }}
          INPUT_SOURCE_URL: ${{ inputs.source_url || 'https://iptv-org.github.io/api/streams.json' }}
        run: |
          python -c "
          import json
          import requests
          import sys
          import os
          from urllib.parse import urlparse
          from datetime import datetime
          
          # Get inputs with defaults
          TIMEOUT = int(os.getenv('INPUT_TIMEOUT', '10'))
          CHECK_ALL = os.getenv('INPUT_CHECK_ALL', 'true').lower() == 'true'
          SOURCE_URL = os.getenv('INPUT_SOURCE_URL', 'https://iptv-org.github.io/api/streams.json')
          
          def is_valid_url(url):
              if not url:
                  return False
              try:
                  parsed = urlparse(url)
                  if not all([parsed.scheme, parsed.netloc]):
                      return False
                  
                  if CHECK_ALL:
                      response = requests.head(url, timeout=TIMEOUT, allow_redirects=True)
                      return response.status_code == 200
                  else:
                      return True
                      
              except Exception as e:
                  print(f'Error checking {url}: {str(e)}')
                  return False
          
          def fetch_and_validate_streams():
              try:
                  print(f'Fetching streams from {SOURCE_URL}')
                  
                  response = requests.get(SOURCE_URL)
                  response.raise_for_status()
                  data = response.json()
                  
                  valid_streams = []
                  total = len(data)
                  
                  print(f'Validating {total} URLs...')
                  
                  for idx, stream in enumerate(data, 1):
                      url = stream.get('url', '')
                      print(f'Checking {idx}/{total}: {url}')
                      
                      if is_valid_url(url):
                          valid_streams.append(stream)
                          print('✓ Valid')
                      else:
                          print('✗ Invalid')
                  
                  print(f'\nFound {len(valid_streams)} valid streams out of {total}')
                  
                  # Save valid streams to a new JSON file
                  with open('validated_streams.json', 'w') as f:
                      json.dump(valid_streams, f, indent=2)
                  
                  # Create validation stats JSON
                  stats = {
                      'last_updated': datetime.utcnow().isoformat(),
                      'source': SOURCE_URL,
                      'total_streams': total,
                      'valid_streams': len(valid_streams),
                      'invalid_streams': total - len(valid_streams),
                      'validation_mode': 'full' if CHECK_ALL else 'quick',
                      'timeout_seconds': TIMEOUT,
                      'success_rate': round((len(valid_streams) / total) * 100, 2) if total > 0 else 0
                  }
                  
                  with open('validation_stats.json', 'w') as f:
                      json.dump(stats, f, indent=2)
                  
                  if not valid_streams:
                      print('No valid streams found!')
                      sys.exit(1)
                      
              except Exception as e:
                  print(f'Error: {str(e)}')
                  sys.exit(1)
          
          fetch_and_validate_streams()
          "
          
      - name: Commit changes
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add validated_streams.json validation_stats.json
          git commit -m "Update streams and validation stats: $(date -u)"
          git push
