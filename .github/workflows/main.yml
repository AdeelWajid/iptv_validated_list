name: Validate Stream URLs

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      timeout:
        description: 'URL validation timeout (seconds)'
        required: true
        default: '10'
        type: number
      check_all:
        description: 'Validate all URLs (slower but thorough)'
        required: true
        default: true
        type: boolean
      source_url:
        description: 'JSON source URL'
        required: true
        default: 'https://iptv-org.github.io/api/streams.json'
        type: string

permissions:
  contents: write

jobs:
  test-permissions:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Test File Creation and Push
        run: |
          echo '{
            "last_check": "'$(date -u)'",
            "status": "initialization_test"
          }' > validation_stats.json
          
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add validation_stats.json
          git commit -m "Initial validation test"
          git push

  validate-urls:
    needs: test-permissions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Quick Validation (First 5 URLs)
        env:
          INPUT_SOURCE_URL: ${{ inputs.source_url || 'https://iptv-org.github.io/api/streams.json' }}
        run: |
          python -c "
          import json
          import requests
          from datetime import datetime
          
          SOURCE_URL = '${{ inputs.source_url || 'https://iptv-org.github.io/api/streams.json' }}'
          
          print(f'Fetching streams from {SOURCE_URL}')
          response = requests.get(SOURCE_URL)
          data = response.json()
          
          # Take first 5 URLs for quick test
          quick_test = data[:5]
          
          stats = {
              'last_updated': datetime.utcnow().isoformat(),
              'source': SOURCE_URL,
              'total_streams': len(data),
              'quick_test_sample': len(quick_test),
              'urls_sample': [stream.get('url', '') for stream in quick_test]
          }
          
          with open('validation_stats.json', 'w') as f:
              json.dump(stats, f, indent=2)
          
          with open('validated_streams.json', 'w') as f:
              json.dump(quick_test, f, indent=2)
          "

      - name: Commit Quick Test Results
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add validated_streams.json validation_stats.json
          git commit -m "Quick validation test results: $(date -u)"
          git push

      - name: Full Validation
        env:
          INPUT_TIMEOUT: ${{ inputs.timeout || '10' }}
          INPUT_CHECK_ALL: ${{ inputs.check_all || 'true' }}
          INPUT_SOURCE_URL: ${{ inputs.source_url || 'https://iptv-org.github.io/api/streams.json' }}
        run: |
          python -c "
          import json
          import requests
          import sys
          import os
          from urllib.parse import urlparse
          from datetime import datetime
          
          TIMEOUT = int(os.getenv('INPUT_TIMEOUT', '10'))
          CHECK_ALL = os.getenv('INPUT_CHECK_ALL', 'true').lower() == 'true'
          SOURCE_URL = os.getenv('INPUT_SOURCE_URL')
          
          def is_valid_url(url):
              if not url:
                  return False
              try:
                  parsed = urlparse(url)
                  if not all([parsed.scheme, parsed.netloc]):
                      return False
                  
                  if CHECK_ALL:
                      response = requests.head(url, timeout=TIMEOUT, allow_redirects=True)
                      return response.status_code == 200
                  else:
                      return True
              except:
                  return False
          
          print(f'Starting full validation from {SOURCE_URL}')
          response = requests.get(SOURCE_URL)
          data = response.json()
          
          valid_streams = []
          total = len(data)
          
          for idx, stream in enumerate(data, 1):
              url = stream.get('url', '')
              print(f'Checking {idx}/{total}: {url}')
              if is_valid_url(url):
                  valid_streams.append(stream)
                  if idx % 50 == 0:  # Save progress every 50 items
                      with open('validated_streams.json', 'w') as f:
                          json.dump(valid_streams, f, indent=2)
                      with open('validation_stats.json', 'w') as f:
                          json.dump({
                              'last_updated': datetime.utcnow().isoformat(),
                              'progress': f'{idx}/{total}',
                              'valid_so_far': len(valid_streams)
                          }, f, indent=2)
                      # Commit progress
                      os.system('git add validated_streams.json validation_stats.json')
                      os.system('git commit -m \"Update validation progress: ' + str(idx) + '/' + str(total) + '\"')
                      os.system('git push')
          
          # Final save
          with open('validated_streams.json', 'w') as f:
              json.dump(valid_streams, f, indent=2)
          
          with open('validation_stats.json', 'w') as f:
              json.dump({
                  'last_updated': datetime.utcnow().isoformat(),
                  'total_streams': total,
                  'valid_streams': len(valid_streams),
                  'validation_complete': True
              }, f, indent=2)
          "

      - name: Final Commit
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add validated_streams.json validation_stats.json
          git commit -m "Complete validation: $(date -u)"
          git push
